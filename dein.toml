[[plugins]]
repo = 'osyo-manga/vim-anzu'

[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = '''
  let g:auto_save = 1
'''

[[plugins]] 
repo = 'ulwlu/elly.vim'

[[plugins]]
repo = 'plasticboy/vim-markdown'

[[plugins]]
repo = 'previm/previm'
hook_add = '''
  autocmd BufRead,BufNewFile *.md  set filetype=markdown
  let g:vim_markdown_folding_disabled=1
  let g:previm_enable_realtime=1
'''

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = "airblade/vim-gitgutter"
hook_add = '''
  nmap ]h <Plug>(GitGutterNextHunk)
  nmap [h <Plug>(GitGutterPrevHunk)
'''

[[plugins]]
repo = 'alvan/vim-closetag'
hook_add = '''
  let g:closetag_filenames = '*.html,*.vue'
'''

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'tyru/caw.vim'

[[plugins]]
repo = 'mattn/vim-lexiv'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
 
###fzf.vim
[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
  nnoremap <silent> <leader>r :Rg<CR>
  nnoremap <silent> <leader>g :GFiles<CR>
'''

[[plugins]]
repo = 'vim-test/vim-test'
hook_add = '''
  nmap <silent> t<C-n> :TestNearest<CR>
  nmap <silent> t<C-f> :TestFile<CR>
  nmap <silent> t<C-s> :TestSuite<CR>
  nmap <silent> t<C-l> :TestLast<CR>
  nmap <silent> t<C-g> :TestVisit<CR>
'''

[[plugins]]
repo = 'SirVer/ultisnips'
hook_add = '''
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<c-j>"
  let g:UltiSnipsJumpBackwardTrigger="<c-k>"
  nnoremap <silent> <leader>s :Snippets<CR>
'''

[[plugins]]
repo = 'honza/vim-snippets'

# go get github.com/go-delve/delve/cmd/dlv
[[plugins]]
repo = 'sebdah/vim-delve'
hook_add = '''
  nnoremap <silent> <leader>d :DlvDebug<CR>
  nnoremap <silent> <leader>b :DlvToggleBreakpoint<CR>
'''

[[plugins]]
repo = 'buoto/gotests-vim'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
  let g:fern#default_hidden=1
  nnoremap <C-n> :Fern . -reveal=% -drawer -toggle -width=40<CR>
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'

[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
  let g:blamer_date_format = '%Y/%m/%d %H:%M'
'''

[[plugins]]
repo = 'skanehira/translate.vim'
hook_add = '''
  let g:translate_popup_window = 0
'''

[[plugins]]
repo = 'rhysd/conflict-marker.vim'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_source = 'call coil398#init#coc#hook_source()'
hook_add = '''
  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  " Remap keys for gotos
  nmap <leader>ld <Plug>(coc-definition)
  nmap <leader>lt <Plug>(coc-type-definition)
  nmap <leader>li <Plug>(coc-implementation)
  nmap <leader>lr <Plug>(coc-references)

  " Use K to show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Remap for rename current word
  nmap <leader>rn <Plug>(coc-rename)

  " Remap for format selected region
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap for do codeAction of current line
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Fix autofix problem of current line
  nmap <leader>qf  <Plug>(coc-fix-current)
'''

[[plugins]]
repo = 'cohama/lexima.vim'
